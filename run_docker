#!/usr/bin/env python3
import argparse
import os
import re
import shutil
import subprocess
from pathlib import Path
from tempfile import TemporaryDirectory
from typing import Optional

_DEPTH_ANYTHING_ROS_ROOT_INSIDE_CONTAINER = "/root/catkin_ws/src/depth_anything_ros"

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-launch", type=str, help="launch file name")
    parser.add_argument(
        "-host", type=str, default="pr1040", help="host name or ip-address"
    )
    parser.add_argument(
        "launch_args",
        nargs=argparse.REMAINDER,
        help="launch args in ros style e.g. foo:=var",
    )
    args = parser.parse_args()

    mount_path_str: Optional[str] = Path(__file__).resolve().parent / "launch"
    assert mount_path_str is not None
    mount_path = Path(mount_path_str)

    launch_file_name: Optional[str] = args.launch
    assert launch_file_name is not None

    for launch_arg in args.launch_args:
        assert bool(re.match(r".*:=.*", launch_arg))
    launch_args = " ".join(args.launch_args)

    use_gpu = True  # default
    for launch_arg in args.launch_args:
        if "device:=" not in launch_arg:
            continue
        device = launch_arg.split(":=")[1]
        if device == "cpu":
            use_gpu = False

    with TemporaryDirectory() as td:
        tmp_launch_path = Path(td) / "launch"
        if mount_path.is_dir():
            shutil.copytree(mount_path, tmp_launch_path)
        else:
            shutil.copyfile(mount_path, tmp_launch_path)

        docker_run_command = """
            docker run \
                -v {node_scripts_dir}:{depth_anything_ros_root}/node_scripts \
                -v {tmp_launch_path}:{depth_anything_ros_root}/launch \
                --rm --net=host -it \
                {gpu_arg} \
                depth_anything_ros:latest \
                /bin/bash -i -c \
                "source ~/.bashrc; \
                roscd depth_anything_ros; \
                rossetip; rossetmaster {host}; \
                roslaunch depth_anything_ros {launch_file_name} {launch_args}"
                """.format(
            node_scripts_dir=Path(__file__).resolve().parent / "node_scripts",
            tmp_launch_path=tmp_launch_path,
            depth_anything_ros_root=_DEPTH_ANYTHING_ROS_ROOT_INSIDE_CONTAINER,
            gpu_arg="--gpus 1" if use_gpu else "",
            host=args.host,
            launch_file_name=launch_file_name,
            launch_args=launch_args,
        )
        subprocess.call(docker_run_command, shell=True)
